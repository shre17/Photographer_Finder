<div class="jumbotron">
  <h1 class="display-6 text-center">Welcome to <br>Photographer Finders</h1>
  <p class="lead text-center">This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information.</p>
  <div class="row">
    <div class="col-md-10 offset-md-1">
      <div class="card">
        <div class="card-body">
          <%= form_for :test, url: :root, method: :get, html: {class: "mt-3"} do |f| %>
            <%= f.hidden_field :latitude, id: "latitude" %>
            <%= f.hidden_field :latitude, id: "longitude" %>
            <div class="row">
              <div class="col-md-5 col-sm-2">
                <div class="form-group">
                  <%= f.text_field :category, class: "form-control", placeholder: "Search photographers by category" %>
                </div>
              </div>
              <div class="col-md-5 col-sm-2">
                <div class="form-group">
                  <%= f.text_field :location, class: "form-control", placeholder: "Search photographers by location", id: "autocomplete", onFocus: "geolocate()" %>
                </div>
              </div>
              <div class="col-md-2 col-sm-2">
                <div class="form-group">
                  <%= f.submit "Search", class: "btn btn-primary btn-block" %>
                </div>
              </div>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>
  <div class="text-center mt-5">
    <%= link_to "View list of photographers", "", class: "btn btn-outline-primary btn-lg" %>
  </div>
</div>


<script>
      // This example displays an address form, using the autocomplete feature
      // of the Google Places API to help users fill in the information.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

      var placeSearch, autocomplete;
      var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
      };

      function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
            {types: ['geocode']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }

      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
          document.getElementById(component).value = '';
          document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
          var addressType = place.address_components[i].types[0];
          if (componentForm[addressType]) {
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;
          }
        }
      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCxIrb1Ujl3H9YkO5kvFqQvJrftII9w6l8&libraries=places&callback=initAutocomplete"
        async defer></script>